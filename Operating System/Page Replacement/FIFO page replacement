#include<bits/stdc++.h>
using namespace std;

int pageFaults(int pages[], int n, int capacity)
{
	unordered_set<int> s;
	queue<int> indexes;
	int page_faults = 0;
	for (int i=0; i<n; i++)
	{
		if (s.size() < capacity)
		{
			if (s.find(pages[i])==s.end()){
				s.insert(pages[i]);
				page_faults++;
				indexes.push(pages[i]);
			}
		}
		else
		{
			if (s.find(pages[i]) == s.end())
			{
				int val = indexes.front();
				indexes.pop();
				s.erase(val);
				s.insert(pages[i]);
				indexes.push(pages[i]);
				page_faults++;
			}
		}
	}

	return page_faults;
}

int main()
{
	int pages[] = {1,2,3,4,1,2,5,1,2,3,4,5};
	cout<<"Given reference string : ";
	for(int i=0;i<12;i++)
        cout<<pages[i]<<" ";
    cout<<endl;
	int capacity1 =3;
	int capacity2=4;
	cout <<"\nNumber of pageFaults for FIFO when number of frames is 3: "<<
	        pageFaults(pages, 12, capacity1)<<" Page Faults"<<endl;
	cout <<"\nNumber of pageFaults for FIFO when number of frames is 4: "<< 
	        pageFaults(pages, 12, capacity2)<<" Page Faults";
	return 0;
}






