#include<iostream> 
using namespace std; 

void findWaitingTime(int processes[], int n,int burst_time[], int wait[], int quantum) 
{ 
	int rem_bt[n]; 
	for (int i = 0 ; i < n ; i++) 
		rem_bt[i] = burst_time[i]; 

	int t = 0;
	while (1) 
	{ 
		bool done = true; 
		for (int i = 0 ; i < n; i++) 
		{ if (rem_bt[i] > 0) 
			{ 
				done = false; 
				if (rem_bt[i] > quantum) 
				{   t += quantum; 
					rem_bt[i] -= quantum; 
				} 
				else
				{	t = t + rem_bt[i]; 
					wait[i] = t - burst_time[i]; 
					rem_bt[i] = 0; 
				} 
			} 
		} 
		if (done == true) 
		break; 
	} 
} 
 
void findTurnAroundTime(int processes[], int n, int burst_time[], int wait[], int turn[]) 
{ 
	for (int i = 0; i < n ; i++) 
		turn[i] = burst_time[i] + wait[i]; 
} 

void findavgTime(int processes[], int n, int burst_time[],int quantum) 
{ 
	int wait[n], turn[n], total_wt = 0, total_tat = 0; 
	findWaitingTime(processes, n,burst_time, wait, quantum); 
	findTurnAroundTime(processes, n, burst_time, wait, turn); 
	
	cout << "Processes "<< " Burst time "<< " Waiting time " << " Turn around time\n"; 
	for (int i=0; i<n; i++) 
	{ 
		total_wt = total_wt + wait[i]; 
		total_tat = total_tat + turn[i]; 
		cout << " " << i+1 << "\t\t" << burst_time[i] <<"\t "<< wait[i] <<"\t\t " << turn[i] <<endl; 
	} 

	cout << "Average waiting time = "	<< (float)total_wt / (float)n; 
	cout << "\nAverage turn around time = "	<< (float)total_tat / (float)n; 
} 

int main() 
{  int size;
   cout<<"Number of processes you want : ";
   cin>>size;
	int *processes=new int[size];
	int *burst_time=new int[size];
	cout<<"PID    Burst Time"<<endl;
	 for (int i = 0 ; i < size; i++)
        cin>> processes[i]>>burst_time[i];
	int quantum = 2; 
	findavgTime(processes, size, burst_time, quantum); 
	return 0; 
} 



